//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Transliteration.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Transliteration.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }

        [AttributeUsage(
        AttributeTargets.Method | AttributeTargets.Parameter | AttributeTargets.Property |
        AttributeTargets.Delegate | AttributeTargets.Field | AttributeTargets.Event |
        AttributeTargets.Class | AttributeTargets.Interface | AttributeTargets.GenericParameter)]
        public sealed class CanBeNullAttribute : Attribute { }

        /// <summary>
        /// Indicates that the value of the marked element could never be <c>null</c>.
        /// </summary>
        /// <example><code>
        /// [NotNull] object Foo() {
        ///   return null; // Warning: Possible 'null' assignment
        /// }
        /// </code></example>
        [AttributeUsage(
          AttributeTargets.Method | AttributeTargets.Parameter | AttributeTargets.Property |
          AttributeTargets.Delegate | AttributeTargets.Field | AttributeTargets.Event |
          AttributeTargets.Class | AttributeTargets.Interface | AttributeTargets.GenericParameter)]
        public sealed class NotNullAttribute : Attribute { }

        /// <summary>
        /// Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
        /// and Lazy classes to indicate that the value of a collection item, of the Task.Result property
        /// or of the Lazy.Value property can never be null.
        /// </summary>
        [AttributeUsage(
          AttributeTargets.Method | AttributeTargets.Parameter | AttributeTargets.Property |
          AttributeTargets.Delegate | AttributeTargets.Field)]
        public sealed class ItemNotNullAttribute : Attribute { }

        /// <summary>
        /// Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
        /// and Lazy classes to indicate that the value of a collection item, of the Task.Result property
        /// or of the Lazy.Value property can be null.
        /// </summary>
        [AttributeUsage(
          AttributeTargets.Method | AttributeTargets.Parameter | AttributeTargets.Property |
          AttributeTargets.Delegate | AttributeTargets.Field)]
        public sealed class ItemCanBeNullAttribute : Attribute { }

        [AttributeUsage(AttributeTargets.Parameter)]
        public sealed class InvokerParameterNameAttribute : Attribute { }


        [AttributeUsage(AttributeTargets.Method)]
        public sealed class NotifyPropertyChangedInvocatorAttribute : Attribute
        {
            public NotifyPropertyChangedInvocatorAttribute() { }
            public NotifyPropertyChangedInvocatorAttribute([NotNull] string parameterName)
            {
                ParameterName = parameterName;
            }

            [CanBeNull] public string ParameterName { get; private set; }
        }

        /// <summary>
        ///   Ищет локализованную строку, похожую на Enter password!.
        /// </summary>
        internal static string EmptyPassword {
            get {
                return ResourceManager.GetString("EmptyPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failed to get user.{0}Reason: {1}.
        /// </summary>
        internal static string SignIn_FailedToGetUser {
            get {
                return ResourceManager.GetString("SignIn_FailedToGetUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failed to validate password.{0}Reason: {1}.
        /// </summary>
        internal static string SignIn_FailedToValidatePassword {
            get {
                return ResourceManager.GetString("SignIn_FailedToValidatePassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User with login {0} doesn&apos;t exist!.
        /// </summary>
        internal static string SignIn_UserDoesntExist {
            get {
                return ResourceManager.GetString("SignIn_UserDoesntExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Wrong password!.
        /// </summary>
        internal static string SignIn_WrongPassword {
            get {
                return ResourceManager.GetString("SignIn_WrongPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Email address {0} is not valid!.
        /// </summary>
        internal static string SignUp_EmailIsNotValid {
            get {
                return ResourceManager.GetString("SignUp_EmailIsNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failed to create user.{0}Reason: {1}.
        /// </summary>
        internal static string SignUp_FailedToCreateUser {
            get {
                return ResourceManager.GetString("SignUp_FailedToCreateUser", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Failed to validate data.{0}Reason: {1}.
        /// </summary>
        internal static string SignUp_FailedToValidateData {
            get {
                return ResourceManager.GetString("SignUp_FailedToValidateData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User with login {0} already exists!.
        /// </summary>
        internal static string SignUp_UserAlreadyExists {
            get {
                return ResourceManager.GetString("SignUp_UserAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User with login {0} doesn&apos;t exist!.
        /// </summary>
        internal static string SignUp_UserdoesntExist {
            get {
                return ResourceManager.GetString("SignUp_UserdoesntExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на User {0} successfully created!.
        /// </summary>
        internal static string SignUp_UserSuccessfulyCreated {
            get {
                return ResourceManager.GetString("SignUp_UserSuccessfulyCreated", resourceCulture);
            }
        }
    }
}
